@using Microsoft.AspNetCore.Identity
@using Bulky.Utility
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@if (SignInManager.IsSignedIn(User))
{
    <!-- Shopping Cart Nav Item -->
    <li class="nav-item position-relative me-3">
        <a class="nav-link px-3 text-white cart-link" asp-area="Customer" asp-controller="Cart" asp-action="Index" 
           title="View Shopping Cart" id="cartNavLink">
            <i class="bi bi-cart3 me-1 cart-icon"></i>
            <span class="d-none d-md-inline">Cart</span>
            <span class="d-md-none">
                <i class="bi bi-cart3"></i>
            </span>
            <!-- Cart Count Badge -->
            <span class="cart-count-badge position-absolute translate-middle badge rounded-pill bg-danger" 
                  id="cartCountBadge" style="display: none;">
                <span id="cartCount">0</span>
                <span class="visually-hidden">items in cart</span>
            </span>
        </a>
        
        <!-- Cart Quick Preview Dropdown (Desktop Only) -->
        <div class="cart-dropdown position-absolute bg-white shadow-lg border-0 rounded-3 d-none" 
             id="cartDropdown" style="top: 100%; right: 0; min-width: 350px; z-index: 1050;">
            <div class="cart-dropdown-content p-3">
                <!-- Cart preview content will be loaded here -->
                <div class="cart-preview-loading text-center py-3">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <small class="text-muted d-block mt-2">Loading cart...</small>
                </div>
            </div>
        </div>
    </li>
}

<style>
    /* Cart Navigation Styling */
    .cart-link {
        position: relative;
        transition: all 0.3s ease;
        border-radius: 8px;
    }

    .cart-link:hover {
        background-color: rgba(255, 255, 255, 0.1);
        transform: translateY(-1px);
    }

    .cart-icon {
        font-size: 1.1rem;
        transition: transform 0.3s ease;
    }

    .cart-link:hover .cart-icon {
        transform: scale(1.1);
    }

    /* Cart Count Badge */
    .cart-count-badge {
        top: 8px;
        left: 60%;
        font-size: 0.7rem;
        min-width: 18px;
        height: 18px;
        line-height: 18px;
        animation: cartBadgePulse 2s ease-in-out infinite;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    @@keyframes cartBadgePulse {
        0%, 100% { transform: translate(-50%, -50%) scale(1); }
        50% { transform: translate(-50%, -50%) scale(1.1); }
    }

    /* Cart Dropdown */
    .cart-dropdown {
        opacity: 0;
        visibility: hidden;
        transform: translateY(-10px);
        transition: all 0.3s ease;
        border: 1px solid rgba(0,0,0,0.1);
        max-height: 400px;
        overflow-y: auto;
    }

    .cart-dropdown.show {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
    }

    .cart-dropdown::before {
        content: '';
        position: absolute;
        top: -8px;
        right: 20px;
        width: 16px;
        height: 16px;
        background: white;
        border-left: 1px solid rgba(0,0,0,0.1);
        border-top: 1px solid rgba(0,0,0,0.1);
        transform: rotate(45deg);
    }

    /* Cart Preview Items */
    .cart-preview-item {
        padding: 0.75rem;
        border-bottom: 1px solid #f0f0f0;
        transition: background-color 0.2s ease;
    }

    .cart-preview-item:hover {
        background-color: #f8f9fa;
    }

    .cart-preview-item:last-child {
        border-bottom: none;
    }

    .cart-preview-image {
        width: 40px;
        height: 50px;
        object-fit: cover;
        border-radius: 4px;
    }

    .cart-preview-total {
        background: linear-gradient(135deg, #4b7147, #578553);
        color: white;
        padding: 0.75rem;
        margin: 0 -0.75rem -0.75rem -0.75rem;
        border-radius: 0 0 0.375rem 0.375rem;
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .cart-count-badge {
            left: 50%;
            top: 5px;
        }
        
        .cart-dropdown {
            display: none !important;
        }
    }

    /* Animation for cart updates */
    .cart-update-animation {
        animation: cartUpdate 0.6s ease;
    }

    @@keyframes cartUpdate {
        0% { transform: scale(1); }
        50% { transform: scale(1.3); background-color: #28a745; }
        100% { transform: scale(1); }
    }

    /* Empty cart styling */
    .cart-preview-empty {
        text-align: center;
        padding: 2rem 1rem;
        color: #6c757d;
    }

    .cart-preview-empty i {
        font-size: 2rem;
        margin-bottom: 0.5rem;
        opacity: 0.5;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        initializeCartNavigation();
    });

    function initializeCartNavigation() {
        updateCartCount();
        initializeCartDropdown();
        
        // Update cart count every 30 seconds
        setInterval(updateCartCount, 30000);
    }

    async function updateCartCount() {
        try {
            const response = await fetch('/Customer/Cart/GetCartCount');
            if (response.ok) {
                const data = await response.json();
                displayCartCount(data.count);
            }
        } catch (error) {
            console.error('Error fetching cart count:', error);
        }
    }

    function displayCartCount(count) {
        const cartCountBadge = document.getElementById('cartCountBadge');
        const cartCountText = document.getElementById('cartCount');
        
        if (cartCountBadge && cartCountText) {
            cartCountText.textContent = count;
            
            if (count > 0) {
                cartCountBadge.style.display = 'inline-block';
                cartCountBadge.classList.add('cart-update-animation');
                
                // Remove animation class after animation completes
                setTimeout(() => {
                    cartCountBadge.classList.remove('cart-update-animation');
                }, 600);
            } else {
                cartCountBadge.style.display = 'none';
            }
            
            // Update cart link title
            const cartLink = document.getElementById('cartNavLink');
            if (cartLink) {
                cartLink.title = count > 0 ? `View Shopping Cart (${count} items)` : 'View Shopping Cart';
            }
        }
    }

    function initializeCartDropdown() {
        const cartLink = document.getElementById('cartNavLink');
        const cartDropdown = document.getElementById('cartDropdown');
        
        if (cartLink && cartDropdown && window.innerWidth >= 768) {
            let hoverTimeout;
            
            // Show dropdown on hover (desktop only)
            cartLink.addEventListener('mouseenter', function() {
                clearTimeout(hoverTimeout);
                loadCartPreview();
                cartDropdown.classList.add('show');
            });
            
            // Hide dropdown when mouse leaves
            cartLink.parentElement.addEventListener('mouseleave', function() {
                hoverTimeout = setTimeout(() => {
                    cartDropdown.classList.remove('show');
                }, 300);
            });
            
            // Keep dropdown open when hovering over it
            cartDropdown.addEventListener('mouseenter', function() {
                clearTimeout(hoverTimeout);
            });
            
            cartDropdown.addEventListener('mouseleave', function() {
                hoverTimeout = setTimeout(() => {
                    cartDropdown.classList.remove('show');
                }, 300);
            });
        }
    }

    async function loadCartPreview() {
        const cartDropdownContent = document.querySelector('.cart-dropdown-content');
        if (!cartDropdownContent) return;
        
        try {
            // Show loading state
            cartDropdownContent.innerHTML = `
                <div class="cart-preview-loading text-center py-3">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <small class="text-muted d-block mt-2">Loading cart...</small>
                </div>
            `;
            
            const response = await fetch('/Customer/Cart/GetCartPreview');
            if (response.ok) {
                const html = await response.text();
                cartDropdownContent.innerHTML = html;
            } else {
                throw new Error('Failed to load cart preview');
            }
        } catch (error) {
            console.error('Error loading cart preview:', error);
            cartDropdownContent.innerHTML = `
                <div class="cart-preview-empty">
                    <i class="bi bi-exclamation-triangle"></i>
                    <p class="mb-0">Error loading cart</p>
                    <small class="text-muted">Please try again</small>
                </div>
            `;
        }
    }

    // Global function to update cart count from other pages
    window.updateNavCartCount = function(count) {
        displayCartCount(count);
    };

    // Global function to animate cart when item is added
    window.animateCartAddition = function() {
        const cartIcon = document.querySelector('.cart-icon');
        if (cartIcon) {
            cartIcon.style.animation = 'cartUpdate 0.6s ease';
            setTimeout(() => {
                cartIcon.style.animation = '';
                updateCartCount(); // Refresh count after animation
            }, 600);
        }
    };
</script>
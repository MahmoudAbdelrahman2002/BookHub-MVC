@model IEnumerable<Bulky.Models.ViewModels.OrderViewModel>

@{
    ViewData["Title"] = "My Orders - BulkyWeb";
}

<!-- Customer Orders Hero Section -->
<section class="customer-orders-hero py-4 py-md-5" style="background: linear-gradient(135deg, #2C3E50 0%, #34495E 50%, #4A6741 100%); position: relative; overflow: hidden;">
    <!-- Decorative Background -->
    <div class="position-absolute w-100 h-100" style="top: 0; left: 0; opacity: 0.1; background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><text y=\"30\" font-size=\"25\" fill=\"%23ffffff\">???</text><text x=\"60\" y=\"70\" font-size=\"20\" fill=\"%23ffffff\">??</text></svg>'); background-size: 120px 120px;"></div>
    
    <div class="container position-relative">
        <div class="row align-items-center">
            <div class="col-12">
                <!-- Breadcrumb Navigation -->
                <nav aria-label="breadcrumb" class="mb-4">
                    <ol class="breadcrumb bg-white bg-opacity-10 p-3 rounded-3 border-0">
                        <li class="breadcrumb-item">
                            <a asp-area="Customer" asp-controller="Home" asp-action="Index" class="text-decoration-none text-white">
                                <i class="bi bi-house-door me-1"></i>Home
                            </a>
                        </li>
                        <li class="breadcrumb-item active text-warning fw-medium" aria-current="page">
                            <i class="bi bi-bag-check me-1"></i>My Orders
                        </li>
                    </ol>
                </nav>

                <!-- Page Header -->
                <div class="text-center mb-4">
                    <h1 class="display-5 fw-bold text-white mb-3" style="font-family: 'Georgia', serif;">
                        <i class="bi bi-bag-check me-3 text-warning"></i>My Orders
                    </h1>
                    <p class="lead text-white opacity-75">Track your order history and current status</p>
                    <div class="decorative-line mx-auto" style="width: 100px; height: 3px; background: linear-gradient(to right, #F39C12, #E67E22); border-radius: 3px;"></div>
                </div>

                <!-- Quick Stats -->
                <div class="row g-3 mt-4">
                    <div class="col-6 col-md-3">
                        <div class="stat-card bg-white bg-opacity-10 rounded-3 p-3 text-center">
                            <i class="bi bi-bag-check text-warning fs-3 mb-2"></i>
                            <div class="fw-bold text-white fs-5">@Model.Count()</div>
                            <small class="text-white opacity-75">Total Orders</small>
                        </div>
                    </div>
                    <div class="col-6 col-md-3">
                        <div class="stat-card bg-white bg-opacity-10 rounded-3 p-3 text-center">
                            <i class="bi bi-clock-history text-info fs-3 mb-2"></i>
                            <div class="fw-bold text-white fs-5">@Model.Count(x => x.OrderHeader.OrderStatus == "Pending" || x.OrderHeader.OrderStatus == "Approved" || x.OrderHeader.OrderStatus == "In Process")</div>
                            <small class="text-white opacity-75">In Progress</small>
                        </div>
                    </div>
                    <div class="col-6 col-md-3">
                        <div class="stat-card bg-white bg-opacity-10 rounded-3 p-3 text-center">
                            <i class="bi bi-truck text-success fs-3 mb-2"></i>
                            <div class="fw-bold text-white fs-5">@Model.Count(x => x.OrderHeader.OrderStatus == "Shipped")</div>
                            <small class="text-white opacity-75">Shipped</small>
                        </div>
                    </div>
                    <div class="col-6 col-md-3">
                        <div class="stat-card bg-white bg-opacity-10 rounded-3 p-3 text-center">
                            <i class="bi bi-currency-dollar text-warning fs-3 mb-2"></i>
                            <div class="fw-bold text-white fs-5">@Model.Sum(x => x.OrderHeader.OrderTotal).ToString("C")</div>
                            <small class="text-white opacity-75">Total Spent</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Filters Section -->
<section class="order-filters py-4" style="background: #f8f9fa;">
    <div class="container">
        <div class="row g-3 align-items-center">
            <!-- Search -->
            <div class="col-12 col-md-6 col-lg-4">
                <div class="input-group">
                    <span class="input-group-text bg-primary text-white border-0">
                        <i class="bi bi-search"></i>
                    </span>
                    <input type="text" id="searchInput" class="form-control border-primary" 
                           placeholder="Search by order ID or product..." 
                           style="border-left: none;">
                </div>
            </div>

            <!-- Status Filter -->
            <div class="col-12 col-md-3 col-lg-2">
                <select id="statusFilter" class="form-select border-success">
                    <option value="">All Status</option>
                    <option value="Pending">Pending</option>
                    <option value="Approved">Approved</option>
                    <option value="In Process">In Process</option>
                    <option value="Shipped">Shipped</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </div>

            <!-- Payment Filter -->
            <div class="col-12 col-md-3 col-lg-2">
                <select id="paymentFilter" class="form-select border-warning">
                    <option value="">All Payments</option>
                    <option value="Pending">Payment Pending</option>
                    <option value="Approved">Payment Complete</option>
                    <option value="Delayed For Approval">Payment Delayed</option>
                </select>
            </div>

            <!-- View Toggle -->
            <div class="col-12 col-md-12 col-lg-4">
                <div class="d-flex flex-wrap gap-2 justify-content-lg-end">
                    <button class="btn btn-primary btn-sm" onclick="toggleView()">
                        <i class="bi bi-grid me-1" id="viewToggleIcon"></i>
                        <span id="viewToggleText">Card View</span>
                    </button>
                    <a asp-area="Customer" asp-controller="Home" asp-action="Index" class="btn btn-outline-success btn-sm">
                        <i class="bi bi-plus-circle me-1"></i>Place New Order
                    </a>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Orders Content Section -->
<section class="orders-content py-4 py-md-5">
    <div class="container">
        @if (Model.Any())
        {
            <!-- Table View (Default) -->
            <div id="tableView" class="table-responsive">
                <table class="table table-hover align-middle" style="border-radius: 15px; overflow: hidden; box-shadow: 0 4px 20px rgba(0,0,0,0.1);">
                    <!-- Table Header -->
                    <thead class="table-dark">
                        <tr>
                            <th scope="col" class="fw-bold">
                                <i class="bi bi-hash me-1"></i>Order ID
                            </th>
                            <th scope="col" class="fw-bold d-none d-md-table-cell">
                                <i class="bi bi-calendar me-1"></i>Date
                            </th>
                            <th scope="col" class="fw-bold">
                                <i class="bi bi-currency-dollar me-1"></i>Total
                            </th>
                            <th scope="col" class="fw-bold d-none d-md-table-cell">
                                <i class="bi bi-flag me-1"></i>Status
                            </th>
                            <th scope="col" class="fw-bold d-none d-lg-table-cell">
                                <i class="bi bi-credit-card me-1"></i>Payment
                            </th>
                            <th scope="col" class="fw-bold text-center">
                                <i class="bi bi-gear me-1"></i>Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var orderViewModel in Model.OrderBy(x => x.OrderHeader.OrderDate).Reverse())
                        {
                            var order = orderViewModel.OrderHeader;
                            var orderDetails = orderViewModel.OrderDetails;
                            
                            <tr class="order-row" data-order-id="@order.Id" data-status="@order.OrderStatus" data-payment="@order.PaymentStatus">
                                <!-- Order ID -->
                                <td class="fw-bold text-primary">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-receipt me-2 text-muted"></i>
                                        #@order.Id.ToString("D6")
                                    </div>
                                    <!-- Mobile Details -->
                                    <div class="d-md-none">
                                        <small class="text-muted d-block">
                                            <i class="bi bi-calendar me-1"></i>@order.OrderDate.ToString("MMM dd, yyyy")
                                        </small>
                                        <div class="mt-1">
                                            <span class="badge bg-@GetStatusColor(order.OrderStatus) me-1">@order.OrderStatus</span>
                                            <span class="badge bg-@GetPaymentColor(order.PaymentStatus)">@order.PaymentStatus</span>
                                        </div>
                                    </div>
                                </td>

                                <!-- Date (Desktop Only) -->
                                <td class="d-none d-md-table-cell">
                                    <div class="date-info">
                                        <div class="fw-medium">@order.OrderDate.ToString("MMM dd, yyyy")</div>
                                        <small class="text-muted">@order.OrderDate.ToString("h:mm tt")</small>
                                    </div>
                                </td>

                                <!-- Total -->
                                <td>
                                    <div class="fw-bold text-success fs-6">@order.OrderTotal.ToString("C")</div>
                                    <small class="text-muted">@orderDetails.Sum(x => x.Count) items</small>
                                </td>

                                <!-- Status (Desktop Only) -->
                                <td class="d-none d-md-table-cell">
                                    <span class="badge bg-@GetStatusColor(order.OrderStatus) px-3 py-2">
                                        <i class="bi bi-@GetStatusIcon(order.OrderStatus) me-1"></i>
                                        @order.OrderStatus
                                    </span>
                                </td>

                                <!-- Payment (Large screens only) -->
                                <td class="d-none d-lg-table-cell">
                                    <span class="badge bg-@GetPaymentColor(order.PaymentStatus) px-3 py-2">
                                        <i class="bi bi-@GetPaymentIcon(order.PaymentStatus) me-1"></i>
                                        @order.PaymentStatus
                                    </span>
                                </td>

                                <!-- Actions -->
                                <td class="text-center">
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@order.Id" 
                                           class="btn btn-outline-primary btn-sm" 
                                           title="View Details">
                                            <i class="bi bi-eye"></i>
                                            <span class="d-none d-lg-inline ms-1">Details</span>
                                        </a>
                                        
                                        @if (order.PaymentStatus == Bulky.Utility.SD.PaymentStatusDelayedForApproval || 
                                             order.PaymentStatus == Bulky.Utility.SD.PaymentStatusPending)
                                        {
                                            <a asp-action="PayNow" asp-route-id="@order.Id" 
                                               class="btn btn-outline-success btn-sm" 
                                               title="Pay Now">
                                                <i class="bi bi-credit-card"></i>
                                                <span class="d-none d-lg-inline ms-1">Pay Now</span>
                                            </a>
                                        }
                                        
                                        @if (order.OrderStatus == Bulky.Utility.SD.StatusShipped && !string.IsNullOrEmpty(order.TrackingNumber))
                                        {
                                            <button class="btn btn-outline-info btn-sm" 
                                                    onclick="trackPackage('@order.TrackingNumber')"
                                                    title="Track Package">
                                                <i class="bi bi-geo-alt"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Card View (Hidden by default) -->
            <div id="cardView" class="d-none">
                <div class="row g-3">
                    @foreach (var orderViewModel in Model.OrderBy(x => x.OrderHeader.OrderDate).Reverse())
                    {
                        var order = orderViewModel.OrderHeader;
                        var orderDetails = orderViewModel.OrderDetails;
                        
                        <div class="col-12 col-md-6 col-xl-4">
                            <div class="card border-0 shadow-sm h-100 order-card" 
                                 style="border-radius: 15px; transition: all 0.3s ease;"
                                 data-order-id="@order.Id" data-status="@order.OrderStatus" data-payment="@order.PaymentStatus">
                                
                                <!-- Card Header -->
                                <div class="card-header text-white py-3" 
                                     style="border-radius: 15px 15px 0 0; background: linear-gradient(135deg, #4A6741, #578553);">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0 fw-bold">
                                            <i class="bi bi-receipt me-2"></i>
                                            Order #@order.Id.ToString("D6")
                                        </h6>
                                        <div class="d-flex gap-1">
                                            <span class="badge bg-@GetStatusColor(order.OrderStatus) bg-opacity-75">
                                                @order.OrderStatus
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Card Body -->
                                <div class="card-body p-4">
                                    <!-- Order Details -->
                                    <div class="order-details mb-3">
                                        <div class="row g-2">
                                            <div class="col-6">
                                                <div class="info-item">
                                                    <small class="text-muted">Date</small>
                                                    <div class="fw-medium">@order.OrderDate.ToString("MMM dd, yyyy")</div>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="info-item">
                                                    <small class="text-muted">Items</small>
                                                    <div class="fw-medium">@orderDetails.Sum(x => x.Count) books</div>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="info-item">
                                                    <small class="text-muted">Total</small>
                                                    <div class="fw-bold text-success">@order.OrderTotal.ToString("C")</div>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="info-item">
                                                    <small class="text-muted">Payment</small>
                                                    <div>
                                                        <span class="badge bg-@GetPaymentColor(order.PaymentStatus)">
                                                            @order.PaymentStatus
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Shipping Info -->
                                    @if (!string.IsNullOrEmpty(order.TrackingNumber))
                                    {
                                        <div class="shipping-info mb-3">
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-truck text-success me-2"></i>
                                                <div>
                                                    <small class="text-muted">Tracking</small>
                                                    <div class="fw-medium">@order.TrackingNumber</div>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    <!-- Payment Status Alert -->
                                    @if (order.PaymentStatus == Bulky.Utility.SD.PaymentStatusDelayedForApproval)
                                    {
                                        <div class="alert alert-warning border-0 py-2 px-3" style="background: rgba(255, 193, 7, 0.1); border-left: 4px solid #ffc107 !important;">
                                            <small class="d-flex align-items-center">
                                                <i class="bi bi-exclamation-triangle me-2"></i>
                                                <strong>Payment Required:</strong> Please complete your payment.
                                            </small>
                                        </div>
                                    }
                                    else if (order.PaymentStatus == Bulky.Utility.SD.PaymentStatusPending)
                                    {
                                        <div class="alert alert-info border-0 py-2 px-3" style="background: rgba(13, 202, 240, 0.1); border-left: 4px solid #0dcaf0 !important;">
                                            <small class="d-flex align-items-center">
                                                <i class="bi bi-info-circle me-2"></i>
                                                <strong>Payment Pending:</strong> Complete payment to confirm order.
                                            </small>
                                        </div>
                                    }
                                </div>

                                <!-- Card Footer -->
                                <div class="card-footer bg-light border-0 py-3" style="border-radius: 0 0 15px 15px;">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <a asp-action="Details" asp-route-id="@order.Id" 
                                           class="btn btn-primary btn-sm">
                                            <i class="bi bi-eye me-1"></i>Details
                                        </a>
                                        
                                        <div class="btn-group" role="group">
                                            @if (order.PaymentStatus == Bulky.Utility.SD.PaymentStatusDelayedForApproval || 
                                                 order.PaymentStatus == Bulky.Utility.SD.PaymentStatusPending)
                                            {
                                                <a asp-action="PayNow" asp-route-id="@order.Id" 
                                                   class="btn btn-success btn-sm">
                                                    <i class="bi bi-credit-card me-1"></i>Pay Now
                                                </a>
                                            }
                                            
                                            @if (order.OrderStatus == Bulky.Utility.SD.StatusShipped && !string.IsNullOrEmpty(order.TrackingNumber))
                                            {
                                                <button class="btn btn-outline-info btn-sm" 
                                                        onclick="trackPackage('@order.TrackingNumber')"
                                                        title="Track Package">
                                                    <i class="bi bi-geo-alt me-1"></i>Track
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <!-- Empty State -->
            <div class="empty-orders text-center py-5">
                <div class="empty-orders-content">
                    <div class="empty-orders-icon mb-4">
                        <i class="bi bi-bag-x display-1 text-muted opacity-50"></i>
                    </div>
                    <h3 class="fw-bold text-muted mb-3">No Orders Found</h3>
                    <p class="text-muted mb-4 lead">You haven't placed any orders yet. Start shopping now!</p>
                    <a asp-area="Customer" asp-controller="Home" asp-action="Index" 
                       class="btn btn-primary btn-lg fw-bold shadow-lg" 
                       style="border-radius: 15px;">
                        <i class="bi bi-plus-circle me-2"></i>Start Shopping
                    </a>
                </div>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            initializeOrderManagement();
            initializeFilters();
            initializeMobileOptimizations();
        });

        function initializeOrderManagement() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Card hover effects
            const orderCards = document.querySelectorAll('.order-card');
            orderCards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-5px)';
                    this.style.boxShadow = '0 15px 35px rgba(0,0,0,0.15)';
                });

                card.addEventListener('mouseleave', function() {
                    this.style.transform = '';
                    this.style.boxShadow = '';
                });
            });

            // Row hover effects
            const orderRows = document.querySelectorAll('.order-row');
            orderRows.forEach(row => {
                row.addEventListener('mouseenter', function() {
                    this.style.backgroundColor = 'rgba(75, 113, 71, 0.05)';
                });

                row.addEventListener('mouseleave', function() {
                    this.style.backgroundColor = '';
                });
            });
        }

        function initializeFilters() {
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            const paymentFilter = document.getElementById('paymentFilter');

            // Search functionality
            searchInput.addEventListener('input', function() {
                filterOrders();
            });

            // Status filter
            statusFilter.addEventListener('change', function() {
                filterOrders();
            });

            // Payment filter
            paymentFilter.addEventListener('change', function() {
                filterOrders();
            });
        }

        function filterOrders() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            const paymentFilter = document.getElementById('paymentFilter').value;

            const orderRows = document.querySelectorAll('.order-row');
            const orderCards = document.querySelectorAll('.order-card');

            // Filter table rows
            orderRows.forEach(row => {
                const orderId = row.dataset.orderId;
                const status = row.dataset.status;
                const payment = row.dataset.payment;
                const text = row.textContent.toLowerCase();

                const matchesSearch = text.includes(searchTerm);
                const matchesStatus = !statusFilter || status === statusFilter;
                const matchesPayment = !paymentFilter || payment === paymentFilter;

                if (matchesSearch && matchesStatus && matchesPayment) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });

            // Filter cards
            orderCards.forEach(card => {
                const orderId = card.dataset.orderId;
                const status = card.dataset.status;
                const payment = card.dataset.payment;
                const text = card.textContent.toLowerCase();

                const matchesSearch = text.includes(searchTerm);
                const matchesStatus = !statusFilter || status === statusFilter;
                const matchesPayment = !paymentFilter || payment === paymentFilter;

                if (matchesSearch && matchesStatus && matchesPayment) {
                    card.closest('.col-12').style.display = '';
                } else {
                    card.closest('.col-12').style.display = 'none';
                }
            });
        }

        function toggleView() {
            const tableView = document.getElementById('tableView');
            const cardView = document.getElementById('cardView');
            const toggleIcon = document.getElementById('viewToggleIcon');
            const toggleText = document.getElementById('viewToggleText');

            if (tableView.classList.contains('d-none')) {
                // Switch to table view
                tableView.classList.remove('d-none');
                cardView.classList.add('d-none');
                toggleIcon.className = 'bi bi-grid me-1';
                toggleText.textContent = 'Card View';
            } else {
                // Switch to card view
                tableView.classList.add('d-none');
                cardView.classList.remove('d-none');
                toggleIcon.className = 'bi bi-table me-1';
                toggleText.textContent = 'Table View';
            }
        }

        function trackPackage(trackingNumber) {
            if (trackingNumber) {
                // Determine carrier and create tracking URL
                let trackingUrl = '';
                
                // Simple carrier detection based on tracking number format
                if (trackingNumber.match(/^1Z/)) {
                    // UPS
                    trackingUrl = `https://www.ups.com/track?tracknum=${trackingNumber}`;
                } else if (trackingNumber.match(/^\d{12}$/)) {
                    // FedEx
                    trackingUrl = `https://www.fedex.com/apps/fedextrack/?tracknumbers=${trackingNumber}`;
                } else if (trackingNumber.match(/^\d{20,22}$/)) {
                    // USPS
                    trackingUrl = `https://tools.usps.com/go/TrackConfirmAction?qtc_tLabels1=${trackingNumber}`;
                } else {
                    // Generic tracking
                    showNotification(`Tracking Number: ${trackingNumber}`, 'info');
                    return;
                }
                
                // Open tracking URL in new window
                window.open(trackingUrl, '_blank');
                showNotification(`Opening tracking for: ${trackingNumber}`, 'info');
            }
        }

        function initializeMobileOptimizations() {
            if ('ontouchstart' in window) {
                const interactiveElements = document.querySelectorAll('.btn, .card, .order-row');
                interactiveElements.forEach(element => {
                    element.addEventListener('touchstart', function() {
                        this.style.transform = 'scale(0.98)';
                    });
                    element.addEventListener('touchend', function() {
                        setTimeout(() => {
                            this.style.transform = '';
                        }, 150);
                    });
                });
            }
        }

        function showNotification(message, type) {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type} position-fixed top-0 end-0 m-3`;
            toast.style.zIndex = '9999';
            toast.style.minWidth = '350px';
            toast.style.borderRadius = '12px';
            toast.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 4000);
        }
    </script>
}

@functions {
    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Pending" => "warning",
            "Approved" => "info",
            "In Process" => "primary",
            "Shipped" => "success",
            "Cancelled" => "danger",
            _ => "secondary"
        };
    }

    private string GetStatusIcon(string status)
    {
        return status switch
        {
            "Pending" => "clock",
            "Approved" => "check-circle",
            "In Process" => "gear",
            "Shipped" => "truck",
            "Cancelled" => "x-circle",
            _ => "question-circle"
        };
    }

    private string GetPaymentColor(string payment)
    {
        return payment switch
        {
            "Pending" => "warning",
            "Approved" => "success",
            "Delayed For Approval" => "info",
            "Rejected" => "danger",
            _ => "secondary"
        };
    }

    private string GetPaymentIcon(string payment)
    {
        return payment switch
        {
            "Pending" => "clock",
            "Approved" => "check-circle",
            "Delayed For Approval" => "hourglass-split",
            "Rejected" => "x-circle",
            _ => "question-circle"
        };
    }
}

<style>
    /* Customer Orders Styling */
    .customer-orders-hero {
        min-height: 40vh;
    }

    .stat-card {
        transition: all 0.3s ease;
        border: 1px solid rgba(255,255,255,0.1);
    }

    .stat-card:hover {
        transform: translateY(-2px);
        background: rgba(255,255,255,0.15) !important;
    }

    .order-row {
        transition: all 0.2s ease;
    }

    .order-card {
        transition: all 0.3s ease;
    }

    .info-item {
        padding: 0.25rem 0;
    }

    .info-item small {
        display: block;
        font-size: 0.75rem;
        opacity: 0.7;
    }

    /* Table Enhancements */
    .table-dark th {
        background: linear-gradient(135deg, #2C3E50, #34495E) !important;
        border: none;
    }

    .table tbody tr {
        border-bottom: 1px solid rgba(0,0,0,0.05);
    }

    /* Badge Styling */
    .badge {
        font-size: 0.75rem;
        border-radius: 10px;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .display-5 {
            font-size: 1.8rem !important;
        }
        
        .table-responsive {
            border-radius: 10px;
        }
        
        .order-filters .row > div {
            margin-bottom: 0.5rem;
        }
    }

    @@media (max-width: 576px) {
        .display-5 {
            font-size: 1.5rem !important;
        }
        
        .stat-card {
            padding: 0.75rem !important;
        }
        
        .btn-group .btn {
            padding: 0.375rem 0.5rem;
        }
    }

    /* Animation Keyframes */
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Print Styles */
    @@media print {
        .order-filters,
        .btn,
        .badge {
            display: none !important;
        }
        
        .card {
            border: 1px solid #dee2e6 !important;
            box-shadow: none !important;
        }
        
        .customer-orders-hero {
            background: none !important;
            color: black !important;
        }
    }
</style>